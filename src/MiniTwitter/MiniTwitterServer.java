
////////////////////////////////////////////////////////////////////
///////////////////////// Mini Twitter /////////////////////////////
///////////////////  S e r v e r   C o d e  ////////////////////////
////////////////////////// Ver. 0.0.1 //////////////////////////////
////////////////////////////////////////////////////////////////////


//  Networks Project
//  
//  Supervise Dr. Saad Alabbad
//
//  dev. by kaluaim (Khalid Alnuaim)
//  kaluaim.com


package MiniTwitter;
import java.net.*;
import java.util.*;
import javax.swing.*;
import java.lang.String;



public class MiniTwitterServer extends javax.swing.JFrame  {

    
    
    
    
    /**
     * Creates new form MiniTwitterServer
     */
    public MiniTwitterServer() {
        initComponents();
        
        lstModel = new DefaultListModel();
        lstRgstrUsrs.setModel(lstModel);
        
        usersAddresses = new ArrayList();
        usersNames = new ArrayList();
        usersPorts = new ArrayList();
        registeredUsers = new ArrayList();
    }
    
    private ArrayList<InetAddress> usersAddresses;
    private ArrayList<String> usersNames;
    private ArrayList<Integer> usersPorts;
    private ArrayList<String> registeredUsers;
    
    private String key;
    private String twt;
    private String from;
    private String to;
    private StringTokenizer st;
    private String connect;
    private String sendtonew;
    private String tweting;
    private String directMsg;
    private String rejectDM;
    private String content;
    
    
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textPort = new javax.swing.JTextField();
        btnStart = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstRgstrUsrs = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtaRsevTwt = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        serverIP = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MiniTwitter Server");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("MiniTwitter");

        jLabel2.setText("Port:");

        textPort.setText("9999");

        btnStart.setText("start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("All registered users");

        jScrollPane1.setViewportView(lstRgstrUsrs);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("All Tweets and DM");

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel5.setText("Server");

        jLabel6.setText("ver. 0.0.1");

        txtaRsevTwt.setColumns(20);
        txtaRsevTwt.setRows(5);
        jScrollPane2.setViewportView(txtaRsevTwt);

        jLabel7.setText("Server IP:");

        serverIP.setText("----");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(83, 83, 83)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textPort, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStart)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(serverIP)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(textPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStart)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(serverIP)))
                    .addComponent(jSeparator2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
        ///////////////////////////////////////////////////////////////////
        ///////////////////////////  Start Btn  ///////////////////////////
        //////////////////////////////////////////////////////////////////
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
         int myPort = Integer.parseInt(textPort.getText());
         
         try{
             InetAddress SIP=InetAddress.getLocalHost();
             serverIP.setText(SIP.getHostAddress());
         }catch(Exception e){}
         
         
         
         // inti. for kyes
         connect="1";
         tweting="2";
         directMsg="3";
         rejectDM="4";
         
         
         try{
            
            if (receiving == null)
                receiving = new DatagramSocket(myPort);
            }catch (Exception e){}
         
         
        ///////////////////////////////////////////////////////////////////
        ///////////////////  Thread for each conection  ///////////////////
        //////////////////////////////////////////////////////////////////
         Thread thr1 = new Thread(){
            public void run(){
                while (true){
                    byte[] message = new byte[1024];
                    
                    DatagramPacket received = new DatagramPacket (message,message.length);
                    
                    try{
                        receiving.receive(received);
                    } catch (Exception e){} 
                    
                    
                    try{
                        content = new String (received.getData(),0,received.getLength());
                        StringTokenizer st=new StringTokenizer(content,"&");
                        key=st.nextToken();
                        to=st.nextToken();
                        from=st.nextToken();
                        twt=st.nextToken();
                    
                    }catch (Exception c){}
                    
                    
                    InetAddress userAddress = received.getAddress();
                    int userPort = received.getPort();
                    String id = userAddress.toString()+","+userPort;
                    
                    
                    //////////////////////////////////////////////////////
                    /////////////////// conecting ////////////////////////
                    //////////////////////////////////////////////////////
                    if (key.equals(connect)){
                        if(!registeredUsers.contains(id) && !usersNames.contains(from)){
                            registeredUsers.add(id);
                            usersNames.add(from);
                            usersAddresses.add(userAddress);
                            usersPorts.add(userPort);
                            lstModel.addElement("IP:"+userAddress+"    Port:"+userPort+"     @"+from);
                            
                            
                            byte[] forward2 = new byte[1024];
                            DatagramPacket received3;
                            
                            for(int i=0;i<usersAddresses.size()-1;i++){
                                sendtonew = key+"&"+"*"+"&"+"*"+"&"+usersNames.get(i);
                                forward2=sendtonew.getBytes();
                                received3 = new DatagramPacket(forward2,forward2.length,received.getAddress(),received.getPort());
                                try {
                                       receiving.send(received3);
                                    } catch (Exception e) {}
                            }
                                DatagramPacket received2;
                                byte[] forward = (key+"&"+"*"+"&"+"*"+"&"+twt).getBytes();
                                
                                
                                for(int i=0;i<usersAddresses.size();i++){
                                    InetAddress cl=usersAddresses.get(i);
                                    int cp=usersPorts.get(i);
                                    received2 = new DatagramPacket(forward,forward.length,cl,cp);
                                    
                                    try {
                                             receiving.send(received2);
                                         } catch (Exception e) {}
                                    
                                }
                        }
                        
                    }// if connecting
                    
                    //////////////////////////////////////////////////////
                    /////////////////// tweting //////////////////////////
                    //////////////////////////////////////////////////////
                   if (key.equals(tweting)) {
                    
                        String time = java.util.Calendar.getInstance().getTime().toString();
                        txtaRsevTwt.append("---------------------------------------------------------------------------\n");
                        txtaRsevTwt.append("@"+from+" : "+twt+"\n");
                        txtaRsevTwt.append("  ###  "+time+"  ###\n");
                        txtaRsevTwt.append("---------------------------------------------------------------------------\n");
                        byte[] forward = (key+"&"+"*"+"&"+from+"&"+twt).getBytes();
                        DatagramPacket received2;
                        
                        for(int i=0;i<usersAddresses.size();i++){
                            InetAddress cl=usersAddresses.get(i);
                            int cp=usersPorts.get(i);
                            received2 = new DatagramPacket(forward,forward.length,cl,cp);
                            
                            try {
                                 receiving.send(received2);
                                } catch (Exception e) {}
                        }
                        
                    
                    }// if tweting
                    
                    
                    //////////////////////////////////////////////////////
                    ///////////////////   DM    //////////////////////////
                    //////////////////////////////////////////////////////
                    if (key.equals(directMsg)) {
                        String time = java.util.Calendar.getInstance().getTime().toString();
                        for (int i = 0; i < usersNames.size(); i++) {
                           if(usersNames.get(i).equals(to)){
                               txtaRsevTwt.append("************************************************************\n");
                               txtaRsevTwt.append("**DM** @"+from+" to @"+to+" : "+twt+"\n");
                               txtaRsevTwt.append("  ###  "+time+"  ###\n");
                               txtaRsevTwt.append("************************************************************\n");
                               byte[] forward3 = (key+"&"+to+"&"+from+"&"+twt).getBytes();
                               DatagramPacket received4;
                               InetAddress cl=usersAddresses.get(i);
                               int cp=usersPorts.get(i);
                               received4 = new DatagramPacket(forward3,forward3.length,cl,cp);
                               try {
                                    receiving.send(received4);
                                    } catch (Exception e) {}
                               
                               break;
                           } 
                        }
                    }//if DM
                    
                    
                    //////////////////////////////////////////////////////
                    ////////////////  reject DM    ///////////////////////
                    //////////////////////////////////////////////////////
                    if (key.equals(rejectDM)) {
                        String time = java.util.Calendar.getInstance().getTime().toString();
                        for (int i = 0; i < usersNames.size(); i++) {
                            if(usersNames.get(i).equals(to)){
                                txtaRsevTwt.append("###########################################\n");
                                txtaRsevTwt.append("** rejDM!! ** @"+to+" to @"+from+" : "+twt+"\n");
                                txtaRsevTwt.append("  ###  "+time+"  ###\n");
                                txtaRsevTwt.append("###########################################\n");
                                byte[] forward4 = (key+"&"+to+"&"+from+"&"+twt).getBytes();
                                DatagramPacket received5;
                                InetAddress cl=usersAddresses.get(i);
                                int cp=usersPorts.get(i);
                                received5 = new DatagramPacket(forward4,forward4.length,cl,cp);
                               try {
                                    receiving.send(received5);
                                    } catch (Exception e) {}
                               
                               break;
                            }
                        }
                    }//if reject DM
                    
                    
                    
                    

                    
                    
                    
                }//while
            }//run               
        };// thread
        btnStart.setEnabled(false);
        thr1.start();
      
      
       
       
    }//GEN-LAST:event_btnStartActionPerformed

      
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiniTwitterServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiniTwitterServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiniTwitterServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiniTwitterServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MiniTwitterServer().setVisible(true);
            }
        });
    }
    
    DatagramSocket receiving;
    private javax.swing.DefaultListModel lstModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JList lstRgstrUsrs;
    private javax.swing.JLabel serverIP;
    private javax.swing.JTextField textPort;
    private javax.swing.JTextArea txtaRsevTwt;
    // End of variables declaration//GEN-END:variables
}
